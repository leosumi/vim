# globals

global !p
def className():
    return snip.basename
endglobal

global !p
def printClassName():
    snip.rv = className()
endglobal

global !p
def firstLetterLower(string):
    if len(string) == 0:
        return string
    else:
        return string[0].lower() + string[1:]
endglobal

global !p
def genericVariable(typeVar):
    return firstLetterLower(typeVar)
endglobal

global !p
def genericClassVariable():
    return genericVariable(className())
endglobal

global !p
def printGenericClassVariable():
    snip.rv = genericClassVariable()
endglobal

# Snippets

snippet class "hpp generator" 
//
// Class: `!p printClassName()`
// Author Léo Sumi (pro.leosumi@gmail.com)
//
// Copyright (c) `date +%Y` Léo Sumi
//

#ifndef `!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`
#define `!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`

/**
 * @brief ${1:briefDescription}
 */
class `!p printClassName()`
{
public:
    `!p printClassName()`(${2:/* arguments */});
    virtual ~`!p printClassName()`();

private:
    ${0:/* data */}
};

#endif // `!v substitute(vim_snippets#Filename('$1_HPP','ClassName'),'.*','\U&\E','')`
endsnippet

snippet guard "Include-Guard"
#ifndef ${1:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $1
$0
#endif // $1
endsnippet

snippet cl "class .."
/**
 * @brief ${2:briefDescription}
 */
class ${1:`!p printClassName() or "name"`}
{
public:
    ${1/(\w+).*/$1/}(${3:/* arguments */});
    virtual ~${1/(\w+).*/$1/}();

private:
    ${0:/* data */}
};
endsnippet

snippet funh "methode declaration"
/**
 * $5
 */
${1:int} ${2:name}(${3:/* arguments */}) ${4:const};
$0
endsnippet

# Print

snippet p "print"
std::cout << $0 << std::endl;
endsnippet

snippet pe "print error" 
std::cerr << $0 << std::endl;
endsnippet

# Constructor

snippet cc "copy constructor"
`!p printClassName()`(`!p printClassName()` const& `!p printGenericClassVariable()`);
endsnippet

# Assignment operator

# C++11
# implementation:
# Class& Class::operator=(Class class)
# {
#   swap(*this, class);
#   return *this;
# }
# have to define the swap function
snippet op= "operator =" 
`!p printClassName()`& operator=(`!p printClassName()` `!p printGenericClassVariable()`);
endsnippet

snippet op=del "delete operator =" 
`!p printClassName()`& operator=(`!p printClassName()` const&) = delete;
endsnippet

# Compound assignment operators
# += -= *= /= %=

global !p
def compoundAssignmentOperatorIntern(op):
    return className() + '& operator' + op + '(' + className() + ' const& ' + genericClassVariable() + ');'
endglobal

snippet op+= "operator +=" 
`!p snip.rv = compoundAssignmentOperatorIntern("+=")`
endsnippet

snippet op-= "operator -=" 
`!p snip.rv = compoundAssignmentOperatorIntern("-=")`
endsnippet

# Arithmetic operators
# + - * / %

global !p
def arithmeticOperatorExtern(op):
    return className() + ' const operator' + op + '(' + className() + ' ' + genericClassVariable() + 'Left, ' + className() + ' const& ' + genericClassVariable() + 'Right) const;'
endglobal

snippet op+ "operator +" 
`!p snip.rv = arithmeticOperatorExtern("+")`
endsnippet

snippet op- "operator -" 
`!p snip.rv = arithmeticOperatorExtern("-")`
endsnippet

# Increment and decrement operators
# ++ --

global !p
def crementOperatorInternPrefix(op):
    return className() + '& operator' + op + '();'
endglobal

global !p
def crementOperatorInternSufix(op):
    return className() + '& operator' + op + '(int useless);'
endglobal

snippet op++p "prefix operator ++" 
`!p snip.rv = crementOperatorInternPrefix("++")`
endsnippet

snippet op--p "prefix operator --" 
`!p snip.rv = crementOperatorInternPrefix("--")`
endsnippet

snippet op++s "sufix operator ++" 
`!p snip.rv = crementOperatorInternSufix("++")`
endsnippet

snippet op--s "sufix operator --" 
`!p snip.rv = crementOperatorInternSufix("--")`
endsnippet

# Inverse operator
# -

snippet opInverse "Inverse operator" 
`!p printClassName()` const operator-() const;
endsnippet

# Relational operators
# == != < <= > >=

global !p
def relationalOperatorExtern(op):
    return 'bool operator' + op + '(' + className() + ' const& ' + genericClassVariable() + ', ' + className() + ' const& ' + genericClassVariable() + ') const;'
endglobal

global !p
def relationalOperatorIntern(op):
    return 'bool operator' + op + '(' + className() + ' const& ' + genericClassVariable() + ') const;'
endglobal

snippet op== "operator ==" 
`!p snip.rv = relationalOperatorIntern("==")`
endsnippet

snippet op!= "operator !=" 
`!p snip.rv = relationalOperatorIntern("!=")`
endsnippet

# << and >> operators

snippet op<< "operator <<" 
ostream& operator<<(ostream& out, `!p printClassName()` const& `!p printGenericClassVariable()`);
endsnippet

snippet op>> "operator >>" 
istream& operator>>(istream& in, `!p printClassName()` const& `!p printGenericClassVariable()`);
endsnippet
